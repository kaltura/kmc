<?xml version="1.0" encoding="utf-8"?>
<mx:DataGrid xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="creationCompleteHandler(event)" sortableColumns="false">
	<mx:Metadata>
		[Event(name="captionRemoved", type="com.kaltura.edw.events.GeneralNonCairngormEvent")]
		[Event(name="changeDefault", type="com.kaltura.edw.events.GeneralNonCairngormEvent")]
		[Event(name="captionDownloaded", type="com.kaltura.edw.events.GeneralNonCairngormEvent")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.kaltura.edw.control.events.CaptionsEvent;
			import com.kaltura.edw.control.events.UploadTokenEvent;
			import com.kaltura.edw.events.GeneralNonCairngormEvent;
			import com.kaltura.edw.view.ir.captions.ActionsRenderer;
			import com.kaltura.edw.view.ir.captions.FileTypeRenderer;
			import com.kaltura.edw.view.ir.captions.LabelRenderer;
			import com.kaltura.edw.view.ir.captions.LanguageRenderer;
			import com.kaltura.edw.view.ir.captions.LocationRenderer;
			import com.kaltura.edw.vo.EntryCaptionVO;
			import com.kaltura.kmvc.control.KMvCController;
			import com.kaltura.types.KalturaCaptionType;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;



			// Events dispatched from renderers
			public static const LOCATION_CHANGED:String = 'captionLocationChanged';
			public static const TYPE_CHANGED:String = 'captionTypeChanged';
			public static const LANGUAGE_CHANGED:String = 'captionLanguageChanged';
			public static const LABEL_CHANGED:String = 'captionLabelChanged';
			
			public static const ACTION_DOWNLOAD:String = 'actionDownload';
			public static const ACTION_UPLOAD:String = 'actionUpload';
			public static const ACTION_SET_DEFAULT:String = 'actionSetDefault';
			public static const ACTION_REMOVE:String = 'actionRemove';
			
			
			// Events the table dispatches
			public static const CAPTION_DOWNLOADED:String = "captionDownloaded";
			public static const CAPTION_REMOVED:String = "captionRemoved";
			public static const CHANGE_DEFAULT:String = "changeDefault";


			// captions files extensions
			
			/**
			 * file extension for DFXP format
			 * */
			private static const DFXP_EXT:String = "*.xml";
			
			/**
			 * file extension for SRT format
			 * */
			private static const SRT_EXT:String = "*.srt";
			
			/**

			
			/**
			 * tab controller
			 * */
			public var controller:KMvCController;

			/**
			 * file reference object used to upload new files
			 * */
			private var _uploadFR:FileReference;
			
			/**
			 * when uploading caption file, the caption vo being edited
			 * */
			private var _activeCaption:EntryCaptionVO;


			/**
			 * add listeners to all renderers events
			 * */
			protected function creationCompleteHandler(event:FlexEvent):void {
				// data changed listeners
				addEventListener(LOCATION_CHANGED, handleDataChanged);
				addEventListener(TYPE_CHANGED, handleDataChanged);
				addEventListener(LANGUAGE_CHANGED, handleDataChanged);
				addEventListener(LABEL_CHANGED, handleDataChanged);

				// actions listeners
				addEventListener(ACTION_DOWNLOAD, handleAction);
				addEventListener(ACTION_UPLOAD, handleAction);
				addEventListener(ACTION_SET_DEFAULT, handleAction);
				addEventListener(ACTION_REMOVE, handleAction);

			}


			/**
			 * handle selected action
			 * */
			private function handleAction(e:Event):void {
				var vo:EntryCaptionVO = e.target.data as EntryCaptionVO;
				switch (e.type) {
					case ACTION_DOWNLOAD:
						download(vo);
						break;
					case ACTION_UPLOAD:
						browse(vo);
						break;
					case ACTION_SET_DEFAULT:
						setAsDefault(e.target, vo);
						break;
					case ACTION_REMOVE:
						remove(vo);
						break;
				}
			}


			/**
			 * update relevant vo with changed data
			 * */
			private function handleDataChanged(e:Event):void {
				var vo:EntryCaptionVO = e.target.data as EntryCaptionVO;
				switch (e.type) {
					case LOCATION_CHANGED:
						vo.resourceUrl = (e.target as LocationRenderer).getValue();
						break;
					case TYPE_CHANGED:
						vo.caption.format = (e.target as FileTypeRenderer).getValue();
						break;
					case LANGUAGE_CHANGED:
						vo.caption.language = (e.target as LanguageRenderer).getValue();
						break;
					case LABEL_CHANGED:
						vo.caption.label = (e.target as LabelRenderer).getValue();
						break;
				}
				vo.isChanged = true;
			}


			/**
			 * save caption file to disk
			 * @param caption 	the vo which represents the required caption
			 * */
			protected function download(caption:EntryCaptionVO):void {
				var urlRequest:URLRequest = new URLRequest(caption.serveUrl);
				var fileName:String = caption.caption.id;
				
				// add file extension according to caption type
				switch (caption.caption.format) {
					case KalturaCaptionType.SRT:
						fileName += '.srt';
						break;
					case KalturaCaptionType.DFXP:
						fileName += '.xml';
						break;
				}
				// download asset:
				var fr:FileReference = new FileReference();
				fr.addEventListener(Event.COMPLETE, onDnldComplete);
				fr.download(urlRequest, fileName);
			}

			protected function onDnldComplete(event:Event):void {
				event.target.removeEventListener(Event.COMPLETE, onDnldComplete);
				var e:GeneralNonCairngormEvent = new GeneralNonCairngormEvent(CAPTION_DOWNLOADED, true);
				dispatchEvent(e);
			}

			/**
			 * remove a single caption
			 * @param caption 	the vo which represents the required caption
			 * */
			protected function remove(caption:EntryCaptionVO):void {
				// remove the caption from the data provider so it won't show in ui
				var ar:ArrayCollection = dataProvider as ArrayCollection;
				for (var i:int = 0; i< ar.length; i++) {
					if (ar.getItemAt(i) == caption) {
						ar.removeItemAt(i);
						break;
					}
				}
					
				// tell the panel to remember to remove it on save.
				var e:GeneralNonCairngormEvent = new GeneralNonCairngormEvent(CAPTION_REMOVED, true);
				e.data = caption; 
				dispatchEvent(e);
			}


			protected function setAsDefault(ir:Object, caption:EntryCaptionVO):void {
				// update ui
				for each (var vo:EntryCaptionVO in dataProvider) {
					vo.isKmcDefault = false;
				}
				caption.isKmcDefault = true;
				
				// tell the panel to set it as default on save.
				var e:GeneralNonCairngormEvent = new GeneralNonCairngormEvent(CHANGE_DEFAULT, true);
				e.data = caption; 
				dispatchEvent(e);
			}


			/**
			 * open file selection window with captions file types
			 * */
			protected function browse(caption:EntryCaptionVO):void {
				_uploadFR = new FileReference();
				_uploadFR.addEventListener(Event.SELECT, onFileSelected);
				var fileTypes:String;
				if (caption.caption.id) {
					// caption was already saved in server, its format can't be changed
					switch (caption.caption.format) {
						case KalturaCaptionType.SRT:
							fileTypes = SRT_EXT;
							break;
						case KalturaCaptionType.DFXP:
							fileTypes = DFXP_EXT;
							break;
					}
				}
				else {
					// new caption - allow all types
					fileTypes = SRT_EXT + ';' + DFXP_EXT;
				}
				
				_activeCaption = caption;
				_uploadFR.browse([new FileFilter(resourceManager.getString('drilldown', 'files') + ' (' + fileTypes + ')', fileTypes)]);
			}


			/**
			 * set the format according to the selected file and start upload process
			 * */
			private function onFileSelected(event:Event):void {
				_uploadFR.removeEventListener(Event.SELECT, onFileSelected);
				// set file type dropdown according to file extension
				var fileExtension:String = _uploadFR.name.substring(_uploadFR.name.lastIndexOf('.') + 1, _uploadFR.name.length);
				switch (fileExtension.toLowerCase()) {
					case 'xml':
						_activeCaption.caption.format = KalturaCaptionType.DFXP;
						break;
					default:
						_activeCaption.caption.format = KalturaCaptionType.SRT;
						break;
				}
				_activeCaption.caption.fileExt = fileExtension.toLowerCase();

				// upload the file
				var uploadFile:UploadTokenEvent = new UploadTokenEvent(UploadTokenEvent.UPLOAD_TOKEN, _uploadFR, _activeCaption);
				uploadFile.fileReference.addEventListener(Event.COMPLETE, onUploadComplete);
				uploadFile.fileReference.addEventListener(IOErrorEvent.IO_ERROR, onUploadError);
				uploadFile.fileReference.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onUploadError);
				controller.dispatch(uploadFile);
				
				// update kmc status
				_activeCaption.kmcStatus = EntryCaptionVO.UPLOADING;
				
				// reset downloadUrl, in case there was a previous file.
				_activeCaption.downloadUrl = null;

			}
			
			private function onUploadComplete(event:Event):void {
				// clear listeners
				(event.target as FileReference).removeEventListener(Event.COMPLETE, onUploadComplete);
				(event.target as FileReference).removeEventListener(IOErrorEvent.IO_ERROR, onUploadError);
				(event.target as FileReference).removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onUploadError);
				
				if (_activeCaption.caption.id) {
					// get updated object from the server
					var update:CaptionsEvent = new CaptionsEvent(CaptionsEvent.UPDATE_CAPTION);
					update.captionVo = _activeCaption;
					controller.dispatch(update);
					
					// update kmc status
					_activeCaption.kmcStatus = EntryCaptionVO.PROCESSING;
				}
				else {
					// remember to save new object
					_activeCaption.isNewUploaded = true;
					_activeCaption.isChanged = true;
					// update kmc status
					_activeCaption.kmcStatus = EntryCaptionVO.READY_FOR_SAVE;
				}
			}
			
			private function onUploadError(event:Event):void {
				// clear listeners
				(event.target as FileReference).removeEventListener(Event.COMPLETE, onUploadComplete);
				(event.target as FileReference).removeEventListener(IOErrorEvent.IO_ERROR, onUploadError);
				(event.target as FileReference).removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onUploadError);
				
				// update kmc status
				_activeCaption.kmcStatus = EntryCaptionVO.ERROR;
			}
		]]>
	</mx:Script>

	<mx:columns>
		<mx:DataGridColumn id="location" headerText="{resourceManager.getString('drilldown','captionUrl')}"
						   itemRenderer="com.kaltura.edw.view.ir.captions.LocationRenderer" minWidth="90"/>
		<mx:DataGridColumn id="fileType" headerText="{resourceManager.getString('drilldown','captionType')}"
						   itemRenderer="com.kaltura.edw.view.ir.captions.FileTypeRenderer" minWidth="120" />
		<mx:DataGridColumn id="language" headerText="{resourceManager.getString('drilldown','captionLanguage')}" 
						   itemRenderer="com.kaltura.edw.view.ir.captions.LanguageRenderer" width="168"/>
		<mx:DataGridColumn id="fileLabel" headerText="{resourceManager.getString('drilldown','captionLanguageLabel')}"
						   itemRenderer="com.kaltura.edw.view.ir.captions.LabelRenderer"/>
		<mx:DataGridColumn id="status" headerText="{resourceManager.getString('drilldown','captionStatus')}"
						   itemRenderer="com.kaltura.edw.view.ir.captions.StatusRenderer" width="80"/>
		<mx:DataGridColumn id="actions" headerText="{resourceManager.getString('drilldown','captionActions')}"
						   itemRenderer="com.kaltura.edw.view.ir.captions.ActionsRenderer" width="120"/>
	</mx:columns>
</mx:DataGrid>
